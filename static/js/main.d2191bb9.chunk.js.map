{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","password","setPassword","loggedIn","setLoggedIn","posts","setPosts","post","setPost","content","setContent","handleClick","useCallback","axios","get","headers","then","data","login","showContent","download_url","save","body","message","name","sha","btoa","put","path","alert","className","placeholder","type","onChange","event","target","value","onClick","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"sMA+EeA,MA1Ef,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIWN,mBAAS,IAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKiBR,mBAAS,IAL1B,mBAKNS,EALM,KAKGC,EALH,KAMPC,EAAcC,uBAAY,WAC9BC,IAAMC,IAAN,UATmB,yBASnB,0CAAqE,CACnEC,QAAS,CACP,cAAgB,SAAhB,OAA0Bd,MAE3Be,MAAK,YAAa,IAAXC,EAAU,EAAVA,KACRX,EAASW,QAEV,CAAChB,EAAUK,IACRY,EAAQN,uBAAY,WACxBR,GAAY,KACX,CAACA,IACEe,EAAcP,uBAAY,SAACL,GAC/BC,EAAQD,GACRM,IAAMC,IAAIP,EAAKa,cAAcJ,MAAK,YAAa,IAAXC,EAAU,EAAVA,KAClCP,EAAWO,QAEZ,CAACT,IACEa,EAAOT,uBAAY,WACvB,IAAMU,EAAO,CACXC,QAAShB,EAAKiB,KACdC,IAAKlB,EAAKkB,IACVhB,QAASiB,KAAKjB,IAEhBI,IAAMc,IAAN,UAhCmB,yBAgCnB,4CAA+DpB,EAAKqB,MAAQN,EAAM,CAChFP,QAAS,CACP,cAAgB,SAAhB,OAA0Bd,MAE3Be,MAAK,WACNa,MAAM,gBAEP,CAACtB,EAAMN,EAAUQ,IACpB,OACE,yBAAKqB,UAAU,QACX3B,GACA,yBAAK2B,UAAU,SACb,2BACEC,YAAY,WACZC,KAAK,OACLR,KAAK,WACLS,SAAU,SAACC,GAAD,OAAWhC,EAAYgC,EAAMC,OAAOC,QAC9CA,MAAOnC,IAET,4BAAQoC,QAASnB,GAAjB,UAGJ,6BACA,4BAAQmB,QAAS1B,GAAjB,cAGA,4BACGN,EAAMiC,KAAI,SAAC/B,GAAD,OACT,wBAAI8B,QAAS,kBAAMlB,EAAYZ,KAAQA,EAAKiB,UAGhD,2BACEQ,KAAK,OACLR,KAAK,UACLS,SAAU,SAACC,GAAD,OAAWxB,EAAWwB,EAAMC,OAAOC,QAC7CA,MAAO3B,IAET,4BAAQ4B,QAAShB,GAAjB,UC5DckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.d2191bb9.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport axios from 'axios'\n\nconst GITHUB_API_URL = 'https://api.github.com'\n\nfunction App() {\n  const [password, setPassword] = useState('')\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [posts, setPosts] = useState([])\n  const [post, setPost] = useState({})\n  const [content, setContent] = useState('')\n  const handleClick = useCallback(() => {\n    axios.get(`${GITHUB_API_URL}/repos/saloiatv/website/contents/posts`, {\n      headers: {\n        'Authorization': `token ${password}`\n      }\n    }).then(({data}) => {\n      setPosts(data)\n    })\n  }, [password, setPosts])\n  const login = useCallback(() => {\n    setLoggedIn(true)\n  }, [setLoggedIn])\n  const showContent = useCallback((post) => {\n    setPost(post)\n    axios.get(post.download_url).then(({data}) => {\n      setContent(data)\n    })\n  }, [setPost])\n  const save = useCallback(() => {\n    const body = {\n      message: post.name,\n      sha: post.sha,\n      content: btoa(content)\n    }\n    axios.put(`${GITHUB_API_URL}/repos/saloiatv/website/contents/${post.path}`, body, {\n      headers: {\n        'Authorization': `token ${password}`\n      }\n    }).then(() => {\n      alert('Updated')\n    })\n  }, [post, password, content])\n  return (\n    <div className=\"App\">\n      {!loggedIn &&\n        <div className=\"login\">\n          <input \n            placeholder=\"Password\"\n            type=\"text\"\n            name=\"password\"\n            onChange={(event) => setPassword(event.target.value)}\n            value={password}\n          />\n          <button onClick={login}>Login</button>\n        </div>\n      }\n      <br />\n      <button onClick={handleClick}>\n        List posts\n      </button>\n      <ul>\n        {posts.map((post) => \n          <li onClick={() => showContent(post)}>{post.name}</li>\n        )}\n      </ul>\n      <input\n        type=\"text\"\n        name=\"content\"\n        onChange={(event) => setContent(event.target.value)}\n        value={content} \n      />\n      <button onClick={save}>\n        Save\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}